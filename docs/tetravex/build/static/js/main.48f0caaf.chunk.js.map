{"version":3,"sources":["data/constants/constants.js","DraggableObject.js","DraggableIcon.js","data/actions/gameActions.js","data/actions/actionTypes.js","data/reducers/gameReducer.js","DropTarget.js","DropGrid.js","network.js","ObjectTray.js","data/reducers/rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["colors","leds","colorTable","RawDraggableObject","props","getRef","x","y","angle","id","icon","className","data-draggableid","ref","style","position","left","top","width","height","boxSizing","transform","display","touchAction","userSelect","children","defaultProps","Reactable","reactable","DraggableObject","React","coordinate","setCoordinate","xOffset","yOffset","draggable","onDragStart","event","color","parseInt","i","window","sendRGB","rgb","onDragMove","dx","dy","prev","onDragEnd","DraggableIcon","src","alt","itemDropped","row","col","type","piece","backgroundColor","borderColor","borderWidth","borderStyle","backgroundSize","key","connect","dispatch","bindActionCreators","accept","dropzone","onDrop","relatedTarget","dataset","draggableid","state","rows","game","settings","cols","board","grid","columns","j","push","padding","margin","borderCollapse","borderSpacing","createGrid","uuidv4","replace","c","r","Math","random","toString","Network","store","this","initialState","undefined","clientId","subscribe","onStateChanged","getState","_","isEqual","pieces","icons","length","emptyBoard","cellTemplate","combineReducers","action","console","log","JSON","stringify","clone","get","permissible","right","DEFAULT_COLS","bottom","DEFAULT_ROWS","iid","produce","newState","oldElement","remove","element","sort","objectid","set","uniq","createStore","rootReducer","marginLeft","marginRight","GlobalDropTarget","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48f0caaf.chunk.js","sourcesContent":["export const EMPTY_CELL = -1;\r\nexport const DEFAULT_COLS = 4;\r\nexport const DEFAULT_ROWS = 4;\r\n\r\n\r\nexport const colors = [[1, 3, 5, 5],\r\n[0, 3, 5, 3],\r\n[1, 7, 6, 3],\r\n[5, 2, 3, 7],\r\n[5, 7, 7, 2],\r\n[5, 3, 6, 7],\r\n[6, 6, 3, 3],\r\n[3, 5, 2, 6],\r\n[7, 1, 1, 2],\r\n[6, 4, 8, 1],\r\n[3, 8, 7, 4],\r\n[2, 1, 9, 8],\r\n[1, 4, 9, 1],\r\n[8, 4, 1, 4],\r\n[7, 8, 1, 4],\r\n[9, 5, 2, 8]];\r\n\r\nexport const leds = [9,6,1,4];\r\n\r\nexport const colorTable = [\r\n    [0,0,0],   //0 black\r\n    [178,38,24],   //1 brown\r\n    [255,0,0],   //2 red\r\n    [255,28,0],   //3 orange\r\n    [255,105,0],   //4 yellow\r\n    [0,255,0],   //5 green\r\n    [0,0,255],   //6 blue\r\n    [87,0,41],   //7 purple\r\n    [5,5,5],   //8 gray\r\n    [255,255,255]];  //9 white\r\n","import * as React from 'react'\r\n\r\nimport { colors, colorTable, leds, EMPTY_CELL } from './data/constants/constants'\r\nimport reactable from 'reactablejs'\r\n\r\n// The UI representation of the draggable object.  This is currently just a gray background box with a black border,\r\n// but could be anything you like.  The root element must have ref={getRef} set.\r\n//\r\n// data-draggableid is used so the target of the dragdrop operation can determine what was dropped on it\r\n// from the DOM element independently of react, since the dragdrop library is unaware of React.\r\n//\r\n// As the object moves, 'x' and 'y' will be updated to allow the object's position to shift around the page.\r\n// These variables are tracked as props, which are contained within this object and independent of the overall\r\n// state (and therefore local to this instance of the game).\r\nconst RawDraggableObject = (props) => {\r\n    const { getRef, x, y, angle, id, icon } = props\r\n\r\n    return (\r\n        <div\r\n            className=\"draggableObject\"\r\n            data-draggableid={id}\r\n            ref={getRef}\r\n            style={{\r\n                position: 'relative',\r\n                left: x,\r\n                top: y,\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                boxSizing: \"border-box\",\r\n                transform: `rotate(${angle}deg)`,\r\n                //border: \"1px solid black\",\r\n                display: 'inline-block',\r\n                //background: \"gray\",\r\n                touchAction: \"none\",\r\n                userSelect: \"none\",\r\n                ...props.style\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n// The object starts without any layout translations.\r\nRawDraggableObject.defaultProps = {\r\n    x: 0,\r\n    y: 0,\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n    angle: 0\r\n}\r\n\r\n// Wrap the raw object in the reactable library to allow it to interact with dragdrop events.\r\nconst Reactable = reactable(RawDraggableObject)\r\n\r\n// Finally, configure the Reactable logic.\r\nconst DraggableObject = (props) => {\r\n    const [coordinate, setCoordinate] = React.useState({ x: 0, y: 0 })\r\n    const { id, xOffset, yOffset , icon} = props;\r\n\r\n    \r\n    var rgb = () => { \r\n        let color = colors[parseInt(icon, 10)];\r\n        \r\n        for (let i=0; i<4; i++)\r\n        {\r\n            window.sendRGB(colorTable[color[i]][0], colorTable[color[i]][1], colorTable[color[i]][2], leds[i], leds[i]);\r\n        }\r\n    };\r\n\r\n    var hide = () => {window.sendRGB(0,0,0,0,10)};\r\n\r\n\r\n    if (id === EMPTY_CELL) {\r\n        // Don't bother rendering a draggable surface if the cell is empty.\r\n        return props.children;\r\n    }\r\n    else {\r\n        return (\r\n            <Reactable\r\n                icon={icon}\r\n                // Mark the object as draggable.\r\n                draggable\r\n                onDragStart={event => {\r\n                    rgb();\r\n                }}\r\n                // Update the properties as the object moves so the CSS translation occurs.\r\n                onDragMove={event => {\r\n                    const { dx, dy } = event\r\n                    setCoordinate(prev => ({\r\n                        x: prev.x + dx,\r\n                        y: prev.y + dy\r\n                    }))\r\n                }}\r\n                onDragEnd={event => {\r\n                    hide();\r\n                    // If you wanted to keep objects wherever they're dropped, you'd persist that here.\r\n                    // Instead, we reset any translation once the drop has occurred so it snaps back to its original position.\r\n                    setCoordinate(prev => ({\r\n                        x: 0,\r\n                        y: 0\r\n                    }))\r\n                }}\r\n                id={id}\r\n                \r\n                y={coordinate.y+(yOffset ? yOffset : 0)}\r\n                x={coordinate.x+(xOffset ? xOffset : 0)}\r\n                width={coordinate.width}\r\n                height={coordinate.height}\r\n\r\n                style={{...props.style}}\r\n\r\n            // Other drag behaviors, like resizing, are possible too.  See the InteractJS documentation for more examples.\r\n            >\r\n                {props.children}\r\n            </Reactable>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DraggableObject","import * as React from 'react'\r\n\r\nimport DraggableObject from './DraggableObject'\r\nimport { EMPTY_CELL } from './data/constants/constants'\r\n\r\n// Simple React component that uses DraggableObject to show an icon image.  This could be displaying\r\n// any image or user interface you like!\r\n//\r\n// The && syntax is a convenient way to only render the image if the ID is not EMPTY_CELL.\r\nconst DraggableIcon = (props) => {\r\n    const { id, icon, height, width } = props\r\n\r\n    return (\r\n        <DraggableObject style={{...props.style}} className=\"stacked-object\" id={id} icon={icon} xOffset={props.xOffset} yOffset={props.yOffset}>\r\n            {icon !== EMPTY_CELL && <img src={\"draggables/tile.png\"} height={height} width={width} alt={\"Puzzle Piece\"}></img>}\r\n        </DraggableObject>\r\n    );\r\n}\r\n\r\nexport default DraggableIcon;","import { REPLACE_GAME_STATE, ITEM_DROPPED, ITEM_REMOVED } from './actionTypes';\r\n\r\nexport function itemDropped(row, col, id) {\r\n  return { type: ITEM_DROPPED, row, col, id };\r\n}\r\nexport function replaceGameState(state) {\r\n  return { type: REPLACE_GAME_STATE, state };\r\n}\r\nexport function itemRemoved(id) {\r\n  return { type: ITEM_REMOVED, id };\r\n}","export const ITEM_DROPPED = \"ITEM_DROPPED\";\r\nexport const ITEM_REMOVED = \"ITEM_REMOVED\";\r\nexport const REPLACE_GAME_STATE = \"REPLACE_GAME_STATE\";","import { DEFAULT_COLS, DEFAULT_ROWS, EMPTY_CELL, colors } from '../constants/constants'\r\nimport { ITEM_DROPPED, ITEM_REMOVED, REPLACE_GAME_STATE } from '../actions/actionTypes';\r\n\r\nimport _ from 'lodash'\r\nimport produce from \"immer\"\r\n\r\n//// Initial State\r\n// Based on the DEFAULT_ROWS and DEFAULT_COLS constants, we construct a blank\r\n// gameboard full of EMPTY_CELL.\r\nvar emptyBoard = [];\r\n\r\nvar cellTemplate = { piece: EMPTY_CELL };\r\n\r\nfor (let r = 0; r < DEFAULT_ROWS; r++) {\r\n\tlet row = [];\r\n\tfor (let c = 0; c < DEFAULT_COLS; c++) {\r\n\t\trow.push({ ...cellTemplate });\r\n\t}\r\n\temptyBoard.push(row);\r\n}\r\n\r\n// For this demo, we'll also just include a hodge-podge of 75 Windows 3.1 icons.\r\nvar pieceLibrary = [\"0\",\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"];\r\n\r\n\r\n// Construct the full initial state of the game.\r\n// Pieces can exist either in 'board' or in 'pieces';  the\r\n// reducer removes them from one place when they reappear in the other.\r\nconst initialState = {\r\n\tsettings: {\r\n\t\trows: DEFAULT_ROWS,\r\n\t\tcols: DEFAULT_COLS\r\n\t},\r\n\tboard: emptyBoard,\r\n\tpieces: pieceLibrary\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\tconsole.log(JSON.stringify(state));\r\n\tconsole.log(action);\r\n\tswitch (action.type) {\r\n\t\t// Reload the full game state from an inbound network message.\r\n\t\t// We could be more efficient and do delta changes here if needed,\r\n\t\t// but this is the dead simple way to make sure everyone is always in sync.\r\n\t\tcase REPLACE_GAME_STATE:\r\n\t\t\tif (action.state) {\r\n\t\t\t\tlet clone = { ...action.state };\r\n\t\t\t\treturn clone;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\r\n\t\t// Handle the case where an item is dropped onto the grid.\r\n\t\tcase ITEM_DROPPED:\r\n\t\t\tif (action.id !== undefined && action.row !== undefined && action.col !== undefined) {\r\n\t\t\t\tlet id = action.id;\r\n\t\t\t\tif (id[0] == \"[\") {\r\n\t\t\t\t\tid = _.get(state.board, id);\r\n\t\t\t\t\tif (id) { id = id.piece; }\r\n\t\t\t\t\tconsole.log(id);\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet permissible = true;\r\n\r\n\t\t\t\tlet left = parseInt(action.col > 1 ? state.board[action.row][action.col - 1][\"piece\"] : EMPTY_CELL, 10);\r\n\t\t\t\tlet top = parseInt(action.row > 1 ? state.board[action.row - 1][action.col][\"piece\"] : EMPTY_CELL, 10);\r\n\t\t\t\tlet right = parseInt(action.col < DEFAULT_COLS - 1 ? state.board[action.row][action.col + 1][\"piece\"] : EMPTY_CELL, 10);\r\n\t\t\t\tlet bottom = parseInt(action.row < DEFAULT_ROWS - 1 ? state.board[action.row + 1][action.col][\"piece\"] : EMPTY_CELL, 10);\r\n\r\n\t\t\t\tvar iid = parseInt(id, 10);\r\n\r\n\t\t\t\tif (left !== EMPTY_CELL && left !== iid) {\r\n\t\t\t\t\tif (colors[left][1] !== colors[id][3]) {\r\n\t\t\t\t\t\tpermissible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (top !== EMPTY_CELL && top !== iid) {\r\n\t\t\t\t\tif (colors[top][2] !== colors[id][0]) {\r\n\t\t\t\t\t\tpermissible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bottom !== EMPTY_CELL && bottom !== iid) {\r\n\t\t\t\t\tif (colors[bottom][0] !== colors[id][2]) {\r\n\t\t\t\t\t\tpermissible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (right !== EMPTY_CELL && right !== iid) {\r\n\t\t\t\t\tif (colors[right][3] !== colors[id][1]) {\r\n\t\t\t\t\t\tpermissible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (permissible) {\r\n\r\n\r\n\t\t\t\t\t// produce is a function from the 'immer' library that makes working\r\n\t\t\t\t\t// with immutable data easier.  Basically, you just make any changes you\r\n\t\t\t\t\t// want to 'newState', and it handles creating a copy of 'state' where \r\n\t\t\t\t\t// all the branches of the object are cloned or not as appropriate.\r\n\t\t\t\t\t// Because we've got a nested array here, it saves a ton of logic.\r\n\t\t\t\t\tlet clone = produce(state, newState => {\r\n\t\t\t\t\t\tlet type = \"piece\";\r\n\r\n\t\t\t\t\t\t// If there was already a piece in the cell we were dropped into, put it back in the tray.\r\n\t\t\t\t\t\tlet oldElement = newState.board[action.row][action.col][type];\r\n\r\n\t\t\t\t\t\t// If this piece was previously somewhere else on the grid, remove it;  there can\r\n\t\t\t\t\t\t// only be one copy in play at any time.  (Remove this logic if it doesn't apply for your game.)\r\n\r\n\t\t\t\t\t\tif (oldElement !== EMPTY_CELL && oldElement !== id) {\r\n\t\t\t\t\t\t\tnewState.pieces.push(oldElement);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Use lodash convenience function 'remove' to remove the old piece from the object tray.\r\n\t\t\t\t\t\t_.remove(newState.pieces, element => element === id);\r\n\t\t\t\t\t\tnewState.pieces.sort();\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < newState.settings.rows; i++) {\r\n\t\t\t\t\t\t\tfor (let j = 0; j < newState.settings.cols; j++) {\r\n\t\t\t\t\t\t\t\tif (newState.board[i][j][type] === id) {\r\n\t\t\t\t\t\t\t\t\tnewState.board[i][j][type] = EMPTY_CELL;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Finally, place the new piece in its home on the grid.\r\n\t\t\t\t\t\tnewState.board[action.row][action.col][type] = id;\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn clone;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle the case where an object is dragged outside the grid and dropped either\r\n\t\t\t// back into the tray or onto the surrounding surface.\r\n\t\t\tbreak;\r\n\t\tcase ITEM_REMOVED:\r\n\t\t\tif (action.id !== undefined) {\r\n\t\t\t\tlet id = action.id;\r\n\r\n\t\t\t\tlet objectid = id;\r\n\r\n\t\t\t\tif (id[0] == \"[\") {\r\n\t\t\t\t\tobjectid = _.get(state.board, id).piece;\r\n\t\t\t\t}\r\n\t\t\t\t// Again, use immer to clone the immutable state correctly.\r\n\t\t\t\tlet clone = produce(state, newState => {\r\n\t\t\t\t\tlet type = \"piece\";\r\n\r\n\t\t\t\t\tif (id[0] == \"[\") {\r\n\t\t\t\t\t_.set(newState.board, id, { piece: EMPTY_CELL });\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// Return the piece to the tray.  Our current behavior puts returned pieces at the bottom\r\n\t\t\t\t\t// of the stack, but this could easily be adjusted by simply sorting the list of pieces.\r\n\r\n\t\t\t\t\tnewState.pieces.push(objectid);\r\n\t\t\t\t\tnewState.pieces.sort();\r\n\r\n\t\t\t\t\tnewState.pieces = _.uniq(newState.pieces);\r\n\r\n\t\t\t\t});\r\n\t\t\t\treturn clone;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import * as React from 'react'\r\n\r\nimport DraggableIcon from './DraggableIcon'\r\nimport { EMPTY_CELL } from './data/constants/constants';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { itemDropped } from './data/actions/gameActions'\r\nimport reactable from 'reactablejs'\r\n\r\n// The UI that populates each square in the grid consists of a simple div that receives the dragdrop events\r\n// containing a DraggableIcon object.\r\n//      <DraggableIcon style={{display: \"block !important\", zIndex: 0}} key={\"ID1\"+icon1} id={props.id+\"[id1]\"} icon={icon1} height={150} width={150} yOffset={20}/>\r\nconst RawDropTarget = (props) => {\r\n  const { getRef, piece } = props;\r\n  return (\r\n    <div ref={getRef} style={{ height: \"150px\", width: \"150px\", backgroundColor: \"#dddddd\", borderColor: \"#000000\", borderWidth: \"3px\", borderStyle:\"solid\", backgroundSize: \"150px 150px\" }}>\r\n      <DraggableIcon key={\"ID2\"+piece} id={props.id} icon={piece} height={150} yOffset={0} xOffset={0}/>\r\n    </div>)\r\n}\r\n\r\n// Wrap the raw target in the reactable library so it can receive dragdrop events.\r\nconst Reactable = reactable(RawDropTarget)\r\n\r\n// Configure the library and wrap it in the final DropTarget component.\r\nconst DropTarget = ({ row, col, id, itemDropped, piece }) => {\r\n  return (\r\n    <Reactable\r\n      accept=\".draggableObject\"\r\n      dropzone\r\n      onDrop={\r\n        event => {\r\n          // Dispatch the ITEM_DROPPED action to the store.\r\n          itemDropped(row, col, event.relatedTarget.dataset.draggableid);\r\n        }}\r\n      piece={piece} id={id}>\r\n    </Reactable>\r\n\r\n  );\r\n};\r\n\r\n// See react-redux documentation for more on how the store integrates with components.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators({ itemDropped }, dispatch)\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(DropTarget);","import * as React from 'react'\r\n\r\nimport DropTarget from './DropTarget'\r\nimport { connect } from 'react-redux';\r\n\r\nconst DropGrid = ({ rows, cols, board }) => {\r\n \r\n  \r\n  let PlantHeader = ({tiles, vertical}) => {\r\n    let plants = [];\r\n    for (let tile of tiles) {\r\n      plants.push(<span style={{display: vertical ? \"block\" : \"inline\", height: \"50px\"}}><img style={{height: \"50px\"}} src={\"draggables/\"+tile[0]+\".png\"}/><span>{tile[1]}</span></span>);\r\n    }\r\n    return (<div>{plants}</div>);\r\n  }\r\n    \r\n  // Create a helper function that constructs the grid of elements.\r\n  let createGrid = () => {\r\n    let grid = [];\r\n    let ch = [<td></td>];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let columns = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        columns.push(\r\n          // Every individual element needs its own consistent key so React can track changes.  We just construct one as row-column.\r\n          <td key={i + \"-\" + j} style={{padding: \"0px\", margin: \"0px\"}}>\r\n            <div\r\n              style={{\r\n                //background: \"#eee\",\r\n                borderColor: \"#eee\",\r\n                borderWidth: \"0px\",\r\n                borderStyle: \"solid\",\r\n                margin: \"0px\",\r\n                padding: \"0px\",\r\n                height: \"150px\",\r\n                width: \"150px\"\r\n              }}>\r\n              <DropTarget row={i} col={j} id={\"[\"+i+\"][\"+j+\"]\"} piece={board[i][j].piece}/>\r\n            </div>\r\n          </td>);\r\n      }\r\n      // The rows need keys, too.\r\n      grid.push(<tr key={i} style={{padding: \"0px\", margin: \"0px\"}}>{columns}</tr>);\r\n    }\r\n    // React also requires the <tbody> tag;  don't get sloppy!\r\n    return (<table style={{borderCollapse: \"collapse\", borderSpacing: \"0\"}}><tbody>{grid}</tbody></table>);\r\n  }\r\n\r\n  return createGrid();\r\n}\r\n\r\n// Extract the number of rows and columns, plus the gameboard, from the game state.\r\nconst mapStateToProps = (state) => ({\r\n  rows: state.game.settings.rows,\r\n  cols: state.game.settings.cols,\r\n  board: state.game.board\r\n});\r\n\r\nexport default connect(mapStateToProps)(DropGrid);","import Paho from 'paho-mqtt';\r\nimport _ from 'lodash';\r\nimport { replaceGameState } from \"./data/actions/gameActions\";\r\n\r\nconst uuidv4 = () => {\r\n    return 'xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n        return v.toString(16);\r\n    });\r\n};\r\n\r\n// This class handles all the network connectivity.\r\nclass Network {\r\n    // Set up the network connection.  We take one parameter, a redux store.\r\n    // We'll directly subscribe to store events rather than using any middleware\r\n    // to keep the example as clear as possible.\r\n    constructor(store) {\r\n        this.store = store;\r\n        let id = uuidv4();\r\n        let team =  uuidv4();\r\n        \r\n        // We broadcast a copy of the entire game state any time it changes, but this can result\r\n        // in an infinite loop broadcasting duplicate updates across multiple clients if we aren't careful.\r\n        // To avoid this, we store a copy of the state here when updating it from the network, and ignore\r\n        // any updates until a change has occurred.\r\n        this.initialState = undefined;\r\n\r\n        // Clients must have a unique ID.  \r\n        this.clientId = uuidv4();\r\n        \r\n        // subscribe to store changes from Redux.\r\n        this.store.subscribe(() => this.onStateChanged());\r\n    }\r\n\r\n    // called when the client connects\r\n    onConnect() {\r\n        // Once a connection has been made, make a subscription to an MQTT channel.\r\n        // Wildcards like # are valid.\r\n        \r\n        // TODO:  block the UI until connected to the server.\r\n    }\r\n\r\n\r\n    onStateChanged() {\r\n        let state = this.store.getState();\r\n\r\n        // Use lodash to do a deep comparison of the state with our locally stored state. \r\n        // If identical, don't publish a new message to the network, because the new state\r\n        // just came from the network a moment ago and it would start an infinite loop!\r\n        if (_.isEqual(this.initialState, state.game)) { return; }\r\n\r\n        // Publish a message to the MQTT server with our latest game state for everyone to see.\r\n        if (state.game) {\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Network;","import * as React from 'react'\r\n\r\nimport DraggableIcon from './DraggableIcon'\r\nimport { connect } from 'react-redux';\r\n\r\n// A simple library of pieces that can be dragged and dropped onto the gameboard.\r\nconst ObjectTray = ({ pieces }) => {\r\n\r\n  let icons = [];\r\n  // for/of syntax is the ES6 equivalent of 'foreach' in C#.\r\n  for (let i = 0; i < pieces.length; i++) {\r\n    let piece = pieces[i];\r\n\r\n    let icon = (<DraggableIcon key={piece} id={piece} icon={piece} height={100} />);\r\n\r\n    icons.push(icon);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {icons}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  pieces: state.game.pieces\r\n});\r\n\r\nexport default connect(mapStateToProps)(ObjectTray);","import { combineReducers } from 'redux';\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n  game: gameReducer\r\n});\r\n","import './App.css';\r\n\r\nimport { Provider, connect } from 'react-redux';\r\n\r\nimport DropGrid from './DropGrid';\r\nimport Network from './network';\r\nimport ObjectTray from './ObjectTray';\r\nimport React from 'react';\r\nimport { createStore } from 'redux';\r\nimport { itemRemoved } from './data/actions/gameActions';\r\nimport reactable from 'reactablejs'\r\nimport rootReducer from './data/reducers/rootReducer';\r\n\r\n// Create the Redux store.\r\nconst store = createStore(rootReducer);\r\n\r\n// The network object is never called and just hangs around doing its thing,\r\n// which confuses the eslint no-unused-vars rule.\r\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"network\" }]*/\r\nconst network = new Network(store);\r\n\r\n\r\n// A react component encompassing most of the app user interface.\r\n// The root HTML element of the UI must have ref={getRef} so the reactable\r\n// library can atach to it.\r\nfunction AppUi({ getRef }) {\r\n  return (\r\n    <div className=\"App\" ref={getRef}>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td style={{ width: \"70vw\" }}>\r\n              <DropGrid />\r\n            </td>\r\n            <td style={{ width: \"30vw\" }}><ObjectTray /><hr/><h4>Reading the Solution:</h4><img src=\"interpret.png\" style={{width: \"80%\", marginLeft: \"10%\", marginRight: \"10%\"}}></img></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>);\r\n}\r\n\r\n// Use the reactable library to enable drag and drop onto the app surface area.\r\n// This is used to allow dragging items off of the game grid to remove them.\r\nconst Reactable = reactable(AppUi)\r\n\r\n// Once the UI is wrapped with the library, we can configure it by wrapping it in\r\n// another React component.\r\n//\r\n// We'll set it up as a dropzone target that accepts objects matching the CSS selector\r\n// .draggableObject ('objects with class draggableObject')\r\nconst GlobalDropTarget = connect()(({ dispatch }) => {\r\n  return (\r\n    <Reactable\r\n      accept=\".draggableObject\"\r\n      dropzone\r\n      onDrop={\r\n        event => {\r\n          dispatch(itemRemoved(event.relatedTarget.dataset.draggableid));\r\n        }}>\r\n    </Reactable>\r\n  );\r\n});\r\n\r\n// Finally, we'll create the full app, which wraps the drop target in the React-Redux store provider.\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <GlobalDropTarget />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}